group llvm;

mainSchema(intVars, decls, stats) ::= 
<<; ModuleID = 'tamaraisthebest.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vector = type { \<32 x i32\>, i32 }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str1 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@init = constant %struct.vector { \<32 x i32\> \<i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0\>, i32 32 }, align 4


; Function Attrs: nounwind ssp uwtable
define i32 @.eqIntegers(i32 %op1, i32 %op2) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %op1, i32* %1, align 4
  store i32 %op2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = icmp eq i32 %3, %4
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define i32 @.neIntegers(i32 %op1, i32 %op2) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %op1, i32* %1, align 4
  store i32 %op2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = icmp ne i32 %3, %4
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define i32 @.gtIntegers(i32 %op1, i32 %op2) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %op1, i32* %1, align 4
  store i32 %op2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = icmp sgt i32 %3, %4
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define i32 @.addIntegers(i32 %op1, i32 %op2) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %op1, i32* %1, align 4
  store i32 %op2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = add nsw i32 %3, %4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define i32 @.subIntegers(i32 %op1, i32 %op2) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %op1, i32* %1, align 4
  store i32 %op2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = sub nsw i32 %3, %4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define i32 @.multIntegers(i32 %op1, i32 %op2) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %op1, i32* %1, align 4
  store i32 %op2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = mul nsw i32 %3, %4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define i32 @.divIntegers(i32 %op1, i32 %op2) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %op1, i32* %1, align 4
  store i32 %op2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = sdiv i32 %3, %4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define void @.printInteger(i32 %i) {
  %1 = alloca i32, align 4
  store i32 %i, i32* %1, align 4
  %2 = load i32* %1, align 4
  %3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %2)
  ret void
}


define void @.printVector(%struct.vector* %x) nounwind uwtable {
	  %1 = alloca %struct.vector*, align 8
	  %i = alloca i32, align 4
	  store %struct.vector* %x, %struct.vector** %1, align 8
	  %2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str1, i32 0, i32 0))
	  store i32 0, i32* %i, align 4
	  br label %3
	
	; <label>:3                                       ; preds = %17, %0
	  %4 = load i32* %i, align 4
	  %5 = load %struct.vector** %1, align 8
	  %6 = getelementptr inbounds %struct.vector* %5, i32 0, i32 1
	  %7 = load i32* %6, align 4
	  %8 = icmp slt i32 %4, %7
	  br i1 %8, label %9, label %20
	
	; <label>:9                                       ; preds = %3
	  %10 = load i32* %i, align 4
	  %11 = sext i32 %10 to i64
	  %12 = load %struct.vector** %1, align 8
	  %13 = getelementptr inbounds %struct.vector* %12, i32 0, i32 0
	  %14 = getelementptr inbounds \<32 x i32\>* %13, i32 0, i64 %11
	  %15 = load i32* %14, align 4
	  %16 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str2, i32 0, i32 0), i32 %15)
	  br label %17
	
	; <label>:17                                      ; preds = %9
	  %18 = load i32* %i, align 4
	  %19 = add nsw i32 %18, 1
	  store i32 %19, i32* %i, align 4
	  br label %3
	
	; <label>:20                                      ; preds = %3
	  %21 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str3, i32 0, i32 0))
	  ret void
}

define void @.range(%struct.vector* %x, i32 %start, i32 %end) nounwind uwtable {
  %1 = alloca %struct.vector*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.vector* %x, %struct.vector** %1, align 8
  store i32 %start, i32* %2, align 4
  store i32 %end, i32* %3, align 4
  store i32 0, i32* %i, align 4
  %4 = load i32* %3, align 4
  %5 = load i32* %2, align 4
  %6 = sub nsw i32 %4, %5
  %7 = add nsw i32 %6, 1
  store i32 %7, i32* %tmp, align 4
  %8 = load i32* %2, align 4
  store i32 %8, i32* %j, align 4
  br label %9

; <label>:9                                       ; preds = %29, %0
  %10 = load i32* %j, align 4
  %11 = load i32* %3, align 4
  %12 = icmp sle i32 %10, %11
  br i1 %12, label %13, label %32

; <label>:13                                      ; preds = %9
  %14 = load i32* %i, align 4
  %15 = load %struct.vector** %1, align 8
  %16 = getelementptr inbounds %struct.vector* %15, i32 0, i32 1
  %17 = load i32* %16, align 4
  %18 = icmp sge i32 %14, %17
  br i1 %18, label %19, label %20

; <label>:19                                      ; preds = %13
  br label %32

; <label>:20                                      ; preds = %13
  %21 = load i32* %j, align 4
  %22 = load i32* %i, align 4
  %23 = sext i32 %22 to i64
  %24 = load %struct.vector** %1, align 8
  %25 = getelementptr inbounds %struct.vector* %24, i32 0, i32 0
  %26 = getelementptr inbounds \<32 x i32\>* %25, i32 0, i64 %23
  store i32 %21, i32* %26, align 4
  %27 = load i32* %i, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %i, align 4
  br label %29

; <label>:29                                      ; preds = %20
  %30 = load i32* %j, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %j, align 4
  br label %9

; <label>:32                                      ; preds = %19, %9
  %33 = load i32* %tmp, align 4
  %34 = icmp slt i32 %33, 32
  br i1 %34, label %35, label %39

; <label>:35                                      ; preds = %32
  %36 = load i32* %tmp, align 4
  %37 = load %struct.vector** %1, align 8
  %38 = getelementptr inbounds %struct.vector* %37, i32 0, i32 1
  store i32 %36, i32* %38, align 4
  br label %42

; <label>:39                                      ; preds = %32
  %40 = load %struct.vector** %1, align 8
  %41 = getelementptr inbounds %struct.vector* %40, i32 0, i32 1
  store i32 32, i32* %41, align 4
  br label %42

; <label>:42                                      ; preds = %39, %35
  ret void
}




define void @.initVector(%struct.vector* %x) nounwind uwtable {
  %1 = alloca %struct.vector*, align 8
  store %struct.vector* %x, %struct.vector** %1, align 8
  %2 = load %struct.vector** %1, align 8
  %3 = bitcast %struct.vector* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast (%struct.vector* @init to i8*), i64 132, i32 4, i1 false)
  ret void
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

declare i32 @printf(i8*, ...)

define i32 @main() nounwind uwtable {
%1 = alloca i32, align 4
<intVars: {var | %<var> = alloca i32, align 4
}>
<vecVars: { var |   %<var> = alloca %struct.vector, align 4
}>
store i32 0, i32* %1
<decls: {decl | <decl>
}>
<stats: {statement | <statement>
}>
	%<label> = load i32* %1
    ret i32 %<label>
}
>>


vecAssign(expr, var, size, label, label2, label3, labels, integers) ::= 
<<
  ; clear the vector
  call void @initVector(%struct.vector* %<var>)
>>

intAssign(expr, var, label) ::= 
<<
	<expr>
	; assign int variable
	store i32 %<label>, i32* %<var>, align 4
>>

loopStat(expr, stats, looplabel, exprlabel, condition, loopbody, loopend) ::= 
<<
	; loop
	br label %<looplabel>
	<expr>
	%<condition> = icmp ne i32 %<exprlabel>, 0
  	br i1 %<condition>, label %<loopbody>, label %<loopend>
  	
  	<stats>
  	br label %<looplabel>
  	; pool
>>

ifStat(expr, stats, exprlabel, condition, ifbody, ifend) ::= 
<<
	; if
	<expr>
	%<condition> = icmp ne i32 %<exprlabel>, 0
  	br i1 %<condition>, label %<ifbody>, label %<ifend>
  	
  	<stats>
  	br label %<ifend>
  	; fi
>>

printInteger(expr, counter) ::= 
<<
  <expr>
  ; print
  tail call void @.printInteger(i32 %<counter>)
>>

printVector(expr, counter) ::= 
<<
  <expr>
  ; print
  call void @.printVector(%struct.vector* %_<counter>)
>>


divIntegers(lhs, rhs, lhsLabel, rhsLabel, counter) ::=
<<
<lhs>
<rhs>
;div
%<counter> = call i32 @.divIntegers(i32 %<lhsLabel>, i32 %<rhsLabel>)

>>

multIntegers(lhs, rhs, lhsLabel, rhsLabel, counter) ::=
<<
<lhs>
<rhs>
;mult
%<counter> = call i32 @.multIntegers(i32 %<lhsLabel>, i32 %<rhsLabel>)
; store result in some known var

>>

subIntegers(lhs, rhs, lhsLabel, rhsLabel, counter) ::=
<<
<lhs>
<rhs>
;subtraction
%<counter> = call i32 @.subIntegers(i32 %<lhsLabel>, i32 %<rhsLabel>) 
; store result in some known var

>>

addIntegers(lhs, rhs, lhsLabel, rhsLabel, counter) ::=
<<
<lhs>
<rhs>
; addition !
%<counter> = call i32 @.addIntegers(i32 %<lhsLabel>, i32 %<rhsLabel>)

>>

gtIntegers(lhs, rhs, lhsLabel, rhsLabel, counter) ::=
<<
<lhs>
<rhs>
; addition !
%<counter> = call i32 @.gtIntegers(i32 %<lhsLabel>, i32 %<rhsLabel>)
>>

ltIntegers(lhs, rhs, lhsLabel, rhsLabel, counter) ::=
<<
<lhs>
<rhs>
; addition !
%<counter> = call i32 @.gtIntegers(i32 %<rhsLabel>, i32 %<lhsLabel>)
>>

eqIntegers(lhs, rhs, lhsLabel, rhsLabel, counter) ::=
<<
<lhs>
<rhs>
; addition !
%<counter> = call i32 @.eqIntegers(i32 %<rhsLabel>, i32 %<lhsLabel>)
>>

neIntegers(lhs, rhs, lhsLabel, rhsLabel, counter) ::=
<<
<lhs>
<rhs>
; addition !
%<counter> = call i32 @.neIntegers(i32 %<rhsLabel>, i32 %<lhsLabel>)
>>

range(lhs, rhs, lhsLabel, rhsLabel, counter) ::=
<<
<lhs>
<rhs>
%_<counter> = alloca %struct.vector, align 4
call void @.initVector(%struct.vector* %_<counter>)
call void @.range(%struct.vector* %_<counter>, i32 %<lhsLabel>, i32 %<rhsLabel>)
>>



loadVariable(var, counter) ::=
<<
; load variable
%<counter> = load i32* %<var>, align 4
>>

loadConstant(value, storecounter, loadcounter) ::=
<<
; store constant and load it into counter
%<storecounter> = alloca i32, align 4
store i32 <value>, i32* %<storecounter>, align 4
%<loadcounter> = load i32* %<storecounter>, align 4
>>
